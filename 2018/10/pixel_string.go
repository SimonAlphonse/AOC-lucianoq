package main

func toString(grid [][]bool, width, height, letterWidth, spaces int) string {
	str := ""
	for offset := 0; offset < width; offset += letterWidth + spaces {
		var sum uint64
		for i := 0; i < height; i++ {
			for j := 0; j < letterWidth; j++ {
				if grid[j+offset][i] {
					sum |= 1 << (letterWidth*i + j)
				}
			}
		}
		str += dict[sum]
	}
	return str
}

var dict = map[uint64]string{

	//  ████
	// █    █
	// █
	// █
	// █
	// █
	// █
	// █
	// █    █
	//  ████
	0b011110_100001_000001_000001_000001_000001_000001_000001_100001_011110: "C",

	// ██████
	// █
	// █
	// █
	// █████
	// █
	// █
	// █
	// █
	// ██████
	0b111111_000001_000001_000001_000001_011111_000001_000001_000001_111111: "E",

	//  ████
	// █    █
	// █
	// █
	// █
	// █  ███
	// █    █
	// █    █
	// █   ██
	//  ███ █
	0b101110_110001_100001_100001_111001_000001_000001_000001_100001_011110: "G",

	// █    █
	// █    █
	// █    █
	// █    █
	// ██████
	// █    █
	// █    █
	// █    █
	// █    █
	// █    █
	0b100001_100001_100001_100001_100001_111111_100001_100001_100001_100001: "H",

	// █
	// █
	// █
	// █
	// █
	// █
	// █
	// █
	// █
	// ██████
	0b111111_000001_000001_000001_000001_000001_000001_000001_000001_000001: "L",

	// ██████
	//      █
	//      █
	//     █
	//    █
	//   █
	//  █
	// █
	// █
	// ██████
	0b111111_000001_000001_000010_000100_001000_010000_100000_100000_111111: "Z",
}
